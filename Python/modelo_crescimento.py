# -*- coding: utf-8 -*-
"""Modelo_Crescimento.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TYVGRkzBRXUNvwk7Vk3Ov6nan2uu2-Lr

**Aqui iremos realizar uma análise sobre a modelagem Exponencial, modelagem Logística e, também, comparar contra os dados experimentais baseado no crescimento populacional de protozoários.**

> P(t)= e^{rt}*A -> Exponencial

> P(t)= K * Po/((exp(-r * t) *(K-Po))+Po) -> Logística
"""

#Aqui iremos carregar nossas bibliotecas:
import matplotlib.pyplot
import pandas as pd
import numpy as np

#Agora iremos montar nosso dataframes com os dados:
data = [[0, 1], [1,3], [2,22],[3, 16], [4,39], [5,52],[6, 54], [7,47], [8,50],[9,76], [10,69], [11,51],[12,57], [13,70], [14,53], [15,59], [16,57]]
dataframe = pd.DataFrame(data, columns=['Dia', 'População'])

#Parâmetros do Plot:
matplotlib.pyplot.plot(dataframe['Dia'], dataframe['População'])
matplotlib.pyplot.title('Crescimento da População de Protozoários em Função do Tempo')
matplotlib.pyplot.xlabel('Tempo (dias)')
matplotlib.pyplot.ylabel('População (u.a.)')
matplotlib.pyplot.scatter(dataframe['Dia'], dataframe['População'], color = 'red',s=10,alpha=0.5)

#Agora iremos construir o modelo exponencial:
#Modelo Exponencial:
def PopExp(t):
  PopExp = 2*(np.exp(0.7944*t))
  return(PopExp)

#Criando valores
nd=[]
for i in range(0,len(dataframe['Dia'])):
  nd.append([dataframe['Dia'][i],PopExp(dataframe['Dia'][i])])
nddf = pd.DataFrame(nd, columns=['Dia', 'População'])

#Parâmetros do Plot (Exponencial Único):
matplotlib.pyplot.plot(nddf['Dia'],nddf['População'])
matplotlib.pyplot.title('Crescimento da População de Protozoários em Função do Tempo')
matplotlib.pyplot.xlabel('Tempo (dias)')
matplotlib.pyplot.ylabel('População (10⁸)')
matplotlib.pyplot.scatter(nddf['Dia'],nddf['População'], color = 'red',s=10,alpha=0.5)
matplotlib.pyplot.savefig('Exponencial.png', format='png',dpi=300) #Salvar Imagem
matplotlib.pyplot.show()

#Plot em União (Exponencial e Observado):
matplotlib.pyplot.plot(nddf['Dia'],nddf['População'],label="Modelo Exponencial")
matplotlib.pyplot.title('Crescimento da População de Protozoários em Função do Tempo')
matplotlib.pyplot.xlabel('Tempo (dias)')
matplotlib.pyplot.ylabel('População (10⁸)')
matplotlib.pyplot.scatter(nddf['Dia'],nddf['População'], color = 'red',s=10,alpha=0.5)
matplotlib.pyplot.plot(dataframe['Dia'], dataframe['População'],label="Observado")
matplotlib.pyplot.scatter(dataframe['Dia'], dataframe['População'], color = 'blue',s=10,alpha=0.5)
matplotlib.pyplot.legend(title="Modelos:")
matplotlib.pyplot.savefig('Misto2.png', format='png',dpi=300) #Salvar Imagem
matplotlib.pyplot.show()

#Agora iremos modelar apartir do crescimento Logístico
#Modelo Logístico:
def PopLol(t):
  PopLol = (64*2)/(2+(np.exp(-0.7944*t)*(64-2)))
  return(PopLol)

#Criando valores
nd=[]
for i in range(0,len(dataframe['Dia'])):
  nd.append([dataframe['Dia'][i],PopLol(dataframe['Dia'][i])])
nsdf = pd.DataFrame(nd, columns=['Dia', 'População'])

#Parâmetros do Plot (Logístico Único):
matplotlib.pyplot.plot(nsdf['Dia'],nsdf['População'])
matplotlib.pyplot.title('Crescimento da População de Protozoários em Função do Tempo')
matplotlib.pyplot.xlabel('Tempo (dias)')
matplotlib.pyplot.ylabel('População ')
matplotlib.pyplot.scatter(nsdf['Dia'],nsdf['População'], color = 'red',s=10,alpha=0.5)
matplotlib.pyplot.savefig('Logistico.png', format='png',dpi=300) #Salvar Imagem
matplotlib.pyplot.show()

#Plot em União (Logístico e Observado):
matplotlib.pyplot.plot(nsdf['Dia'],nsdf['População'],label="Modelo Logístico")
matplotlib.pyplot.title('Crescimento da População de Protozoários em Função do Tempo')
matplotlib.pyplot.xlabel('Tempo (dias)')
matplotlib.pyplot.ylabel('População')
matplotlib.pyplot.scatter(nsdf['Dia'],nsdf['População'], color = 'red',s=10,alpha=0.5)
matplotlib.pyplot.plot(dataframe['Dia'], dataframe['População'],label="Observado")
matplotlib.pyplot.scatter(dataframe['Dia'], dataframe['População'], color = 'blue',s=10,alpha=0.5)
matplotlib.pyplot.legend(title="Modelos:")
matplotlib.pyplot.savefig('Misto3.png', format='png',dpi=300) #Salvar Imagem
matplotlib.pyplot.show()

#Por fim, iremos realizar previsões sobre o crescimento (e sua queda) considerando a quantidade de recursos disponíveis:
#Criando valores
nd=[]
for i in range(0,30):
  nd.append([i,PopLol(i)])
nsdf = pd.DataFrame(nd, columns=['Dia', 'População'])
#Parâmetros do Plot (Logístico Único):
matplotlib.pyplot.plot(nsdf['Dia'],nsdf['População'])
matplotlib.pyplot.title('Crescimento da População de Protozoários em Função do Tempo')
matplotlib.pyplot.xlabel('Tempo (dias)')
matplotlib.pyplot.ylabel('População')
matplotlib.pyplot.scatter(nsdf['Dia'],nsdf['População'], color = 'red',s=10,alpha=0.5)
matplotlib.pyplot.savefig('Logistico.png', format='png',dpi=300) #Salvar Imagem
matplotlib.pyplot.show()

#Agora iremos testar algoritmos de Regressão Linear Simples.
from   sklearn.linear_model import LinearRegression
reg = LinearRegression()
X = dataframe['Dia'].values.reshape(-1,1)
y = dataframe['População'].values.reshape(-1,1)
reg.fit(X, y)
prevs = reg.predict(X) #Predizendo os valores de X.
print("O modelo para população é = {:.5} + {:.5}X".format(reg.intercept_[0], reg.coef_[0][0]))

#Vamos testar o Modelo: 
matplotlib.pyplot.scatter(dataframe['Dia'], dataframe['População'], color = 'red',s=12)
matplotlib.pyplot.title('Crescimento da População de Protozoários em Função do Tempo')
matplotlib.pyplot.xlabel('Tempo (dias)')
matplotlib.pyplot.ylabel('População')
matplotlib.pyplot.plot(dataframe['Dia'],prevs,c='blue',linewidth=3,linestyle=':')
matplotlib.pyplot.savefig('Reg-Simples.png', format='png',dpi=300) #Salvar Imagem
matplotlib.pyplot.show()

#Porém, por ser uma aproximação linear, não descreve suficientemente bem o crescimento ao longo do tempo.

#Agora testando os algoritmos de regressão linear de aprendizado não-supervisionado.
# Dividindo conjunto de treinamento e conjunto de teste
x_train= dataframe["Dia"]
y_train = dataframe["População"]
x_train_scaled = x_train.values.reshape(-1,1)
y_train = y_train.values.reshape(-1,1)

#Algoritmos de Regressão:
from sklearn.svm import SVR                            # Regressão por Máquina de Vetor Suporte
from sklearn.tree import DecisionTreeRegressor         # Regressão por Árvore de Decisão
from sklearn.neighbors import KNeighborsRegressor      # k-vizinhos mais próximos (KNN)
from sklearn.ensemble import RandomForestRegressor     # RandomForest
from sklearn.ensemble import GradientBoostingRegressor # GradientBoosting
from sklearn.neural_network import MLPRegressor        # Multilayer Perceptron

# Regressao Linear
lr = LinearRegression()
lr.fit(x_train_scaled,y_train)

# KNN Regressor
knnr = KNeighborsRegressor()
knnr.fit(x_train_scaled,y_train)

# SVM
svmr = SVR()
svmr.fit(x_train_scaled,y_train)

# Regressão por Árvore de Decisão
dtr = DecisionTreeRegressor()
dtr.fit(x_train_scaled,y_train)

# Regressão por Random
rfr = RandomForestRegressor(random_state=42)
rfr.fit(x_train_scaled, y_train)

# Regressõ por GB
gbr = GradientBoostingRegressor(random_state=42)
gbr.fit(x_train_scaled, y_train)

# Multilayer Perceptron
mlpr =  MLPRegressor(random_state=42)
mlpr.fit(x_train_scaled,y_train)

regressores = {
    'LR':lr,
    'KNNR':knnr,
    'SVMR':svmr,
    'RFR':rfr,
    'GBR':gbr,
    'MLPR':mlpr,
}

#Testando algoritmos:
#Vamos testar o Modelo KNNR: 
y = knnr.predict(dataframe['Dia'].values.reshape(-1,1))
y = pd.DataFrame(y)

#Vamos testar o Modelo: 
matplotlib.pyplot.scatter(dataframe['Dia'], dataframe['População'], color = 'red',s=12)
matplotlib.pyplot.title('Crescimento da População de Protozoários em Função do Tempo')
matplotlib.pyplot.xlabel('Tempo (dias)')
matplotlib.pyplot.ylabel('População')
matplotlib.pyplot.plot(dataframe['Dia'], dataframe['População'],color="yellow")
matplotlib.pyplot.plot(dataframe['Dia'],y ,c='blue',linewidth=3,linestyle=':')
matplotlib.pyplot.savefig('Reg-KNNR.png', format='png',dpi=300) #Salvar Imagem
matplotlib.pyplot.show()

#Ao longo do tempo:
dias = list(range(1,200))
y = knnr.predict(np.reshape(dias,(-1,1)))
y = pd.DataFrame(y)

#Vamos testar o Modelo: 
matplotlib.pyplot.scatter(dataframe['Dia'], dataframe['População'], color = 'red',s=12)
matplotlib.pyplot.title('Crescimento da População de Protozoários em Função do Tempo')
matplotlib.pyplot.xlabel('Tempo (dias)')
matplotlib.pyplot.ylabel('População')
matplotlib.pyplot.plot(dias,y ,c='blue',linewidth=3,linestyle=':')
matplotlib.pyplot.savefig('Reg-KNNR.png', format='png',dpi=300) #Salvar Imagem
matplotlib.pyplot.show()

#Testando algoritmos:
#Vamos testar o Modelo GBR: 
y = gbr.predict(dataframe['Dia'].values.reshape(-1,1))
y = pd.DataFrame(y)

#Vamos testar o Modelo: 
matplotlib.pyplot.scatter(dataframe['Dia'], dataframe['População'], color = 'red',s=12)
matplotlib.pyplot.title('Crescimento da População de Protozoários em Função do Tempo')
matplotlib.pyplot.xlabel('Tempo (dias)')
matplotlib.pyplot.ylabel('População')
matplotlib.pyplot.plot(dataframe['Dia'], dataframe['População'],color="yellow")
matplotlib.pyplot.plot(dataframe['Dia'],y ,c='blue',linewidth=3,linestyle=':')
matplotlib.pyplot.savefig('Reg-GBR.png', format='png',dpi=300) #Salvar Imagem
matplotlib.pyplot.show()

#Ao longo do tempo:
dias = list(range(1,32))
y = gbr.predict(np.reshape(dias,(-1,1)))
y = pd.DataFrame(y)

#Vamos testar o Modelo: 
matplotlib.pyplot.scatter(dataframe['Dia'], dataframe['População'], color = 'red',s=12)
matplotlib.pyplot.title('Crescimento da População de Protozoários em Função do Tempo')
matplotlib.pyplot.xlabel('Tempo (dias)')
matplotlib.pyplot.ylabel('População')
matplotlib.pyplot.plot(dias,y ,c='blue',linewidth=3,linestyle=':')
matplotlib.pyplot.savefig('Reg-GBR.png', format='png',dpi=300) #Salvar Imagem
matplotlib.pyplot.show()